# -*- coding: utf-8 -*-
"""cricket vs baseball.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hcM0SPsI3GHXM1egs5jl2DlS5cH1sjFG
"""

from fastai.vision import *
from fastai import *

# Commented out IPython magic to ensure Python compatibility.
# %reload_ext autoreload
# %autoreload 2
# %matplotlib inline

folder = 'baseball'
file = 'download (5)'

path = Path('data/pics')
dest = path/folder
dest.mkdir(parents=True, exist_ok=True)

folder = 'cricket'
file = 'download (6)'

path = Path('data/pics')
dest = path/folder
dest.mkdir(parents=True, exist_ok=True)

download_images(path/file, dest, max_pics=200)

classes = ['baseball','cricket']

for c in classes:
    print(c)
    verify_images(path/c, delete=True, max_size=500)





np.random.seed(42)
data = ImageDataBunch.from_folder(path, train=".", valid_pct=0.2,
        ds_tfms=get_transforms(), size=224, num_workers=4).normalize(imagenet_stats)

data.show_batch(rows=12, figsize=(7,8))

def conv(ni,nf):
  return nn.Conv2d(ni,nf,kernel_size=3,stride=2,padding=1)

model=nn.Sequential(
    conv(3,8),
    nn.BatchNorm2d(8),
    nn.ReLU(),  
    conv(8,16),
    nn.BatchNorm2d(16),
    nn.ReLU(),
    conv(16,32),
    nn.BatchNorm2d(32),
    nn.ReLU(),  
    conv(32,64),
    nn.BatchNorm2d(64),
    nn.ReLU(),
    conv(64,128),
    nn.BatchNorm2d(128),
    nn.ReLU(),
    conv(128,256),
    nn.BatchNorm2d(256),
    nn.ReLU(),
      conv(256,128),
    nn.BatchNorm2d(128),
    nn.ReLU(),
      conv(128,64),
    nn.BatchNorm2d(64),
    nn.ReLU(),
      conv(64,2),
    nn.BatchNorm2d(2),
    nn.ReLU(),
   
 
    Flatten(),
    #nn.Linear(256,128),
    #nn.Linear(128,32),
    #nn.Linear(32,2) 
    #nn.Softmax(), # remove (1,1) grid  
               # this flattens the 3 dim into single vector of 10 outputs 

)

learn=Learner(data, model , loss_func=nn.CrossEntropyLoss(), metrics=accuracy)

print(learn.summary())

#doc(nn.Conv2d)

learn.lr_find(end_lr=100)

learn.recorder.plot()



learn.fit_one_cycle(10, 1e-02)

#learn = cnn_learner(data, models.resnet34, metrics=accuracy)

#print(learn.summary())

learn.lr_find(end_lr=100)

learn.recorder.plot()

learn.fit_one_cycle(10,1e-04)

learn.lr_find()

learn.recorder.plot()

learn.fit_one_cycle(10,1e-1)

learn.lr_find()

learn.recorder.plot()

learn.fit_one_cycle(10,1e-01)

interp = ClassificationInterpretation.from_learner(learn)

interp.plot_confusion_matrix()

from fastai.widgets import *

data.classes

img = open_image(path/'baseball.jpg')
img

pred_class,pred_idx,outputs = learn.predict(img) 
pred_class

img1 = open_image(path/'baseball2.jpg')
img1

pred_class,pred_idx,outputs = learn.predict(img1) 
pred_class.obj

img3 = open_image(path/'cricket2.jpg')
img3

pred_class,pred_idx,outputs = learn.predict(img3) 
pred_class.obj

img4 = open_image(path/'baseball'/'00000020.jpg')
img4

pred_class,pred_idx,outputs = learn.predict(img4) 
pred_class.obj

img5 = open_image(path/'cricket3.jpg')
img5

pred_class,pred_idx,outputs = learn.predict(img5) 
pred_class.obj

